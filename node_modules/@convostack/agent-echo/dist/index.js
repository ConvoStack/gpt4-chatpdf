"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AgentEcho: () => AgentEcho
});
module.exports = __toCommonJS(src_exports);
var AgentEcho = class {
  async reply(context, callbacks) {
    let humanMessage = context.getHumanMessage().content;
    if (humanMessage.trim() === "") {
      humanMessage = "WARN: no input provided";
    }
    const wordsWithSpaces = humanMessage.match(/(\S+\s*)/g) || [];
    for (const wordWithSpace of wordsWithSpaces) {
      await this.delay(100);
      callbacks.onMessagePart({
        contentChunk: wordWithSpace,
        contentType: "markdown"
      });
    }
    return {
      content: humanMessage,
      contentType: "markdown"
    };
  }
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AgentEcho
});
