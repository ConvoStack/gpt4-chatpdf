"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  serveEchoAgentDev: () => serveEchoAgentDev,
  sseEchoHandler: () => sseEchoHandler
});
module.exports = __toCommonJS(src_exports);
var import_express = __toESM(require("express"));
var sseEchoHandler = (req, res) => {
  const humanMessage = req.body.humanMessage.content;
  const words = humanMessage.split(" ");
  res.writeHead(200, {
    "Content-Type": "text/event-stream",
    "Cache-Control": "no-cache, no-transform",
    Connection: "keep-alive"
  });
  const sendData = (data) => {
    res.write(`data: ${data}

`);
  };
  if (words.length < 1) {
    sendData(JSON.stringify({ contentChunk: "WARN: NO INPUT RECEIVED" }));
    sendData("[DONE]");
    res.end();
    return;
  }
  setTimeout(() => {
    words.forEach((word, index) => {
      setTimeout(() => {
        if (index === words.length - 1) {
          sendData(JSON.stringify({ contentChunk: word }));
          sendData("[DONE]");
          res.end();
        } else {
          sendData(JSON.stringify({ contentChunk: word + " " }));
        }
      }, 100 * index);
    });
  }, 500);
};
var serveEchoAgentDev = async (port, host = "localhost", path = "/api/chat") => {
  const app = (0, import_express.default)();
  app.use(import_express.default.json());
  app.post(path, sseEchoHandler);
  await app.listen(port, () => {
    console.log(`Echo agent server listening at http://${host}:${port}${path}`);
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  serveEchoAgentDev,
  sseEchoHandler
});
