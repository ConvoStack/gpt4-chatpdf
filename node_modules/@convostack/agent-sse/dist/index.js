"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AgentSSEClient: () => AgentSSEClient
});
module.exports = __toCommonJS(src_exports);
var import_launchdarkly_eventsource = require("launchdarkly-eventsource");
var AgentSSEClient = class {
  constructor(sseUrl) {
    this.sseUrl = sseUrl;
  }
  reply(context, callbacks) {
    return new Promise((resolve, reject) => {
      try {
        let pendingContent = "";
        const eventsConn = new import_launchdarkly_eventsource.EventSource(this.sseUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            humanMessage: context.getHumanMessage(),
            history: context.getHistory(),
            contextArgs: context.getContextArgs(),
            user: context.getUser()
          }),
          errorFilter: (e) => {
            if (e && e.type !== "end") {
              reject(e);
            }
            return false;
          }
        });
        eventsConn.onerror = (e) => {
          reject(e);
        };
        eventsConn.onend = (e) => {
        };
        eventsConn.onclosed = (e) => {
        };
        eventsConn.onretrying = (e) => {
        };
        eventsConn.onmessage = async (event) => {
          if (event.data === "[DONE]") {
            resolve({
              content: pendingContent
            });
          } else {
            const data = JSON.parse(event.data);
            pendingContent += data.contentChunk;
            callbacks.onMessagePart({
              contentChunk: data.contentChunk
            });
          }
        };
      } catch (error) {
        reject(error);
      }
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AgentSSEClient
});
