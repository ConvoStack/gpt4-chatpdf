import { IUser, IMessage } from '@convostack/models';

interface IAgent {
    reply(context: IAgentContext, callbacks?: IAgentCallbacks): Promise<IAgentResponse>;
}
interface IAgentMetadata {
    displayName: string;
    primer: string;
    avatarUrl?: string;
}
interface IAgentResponse {
    content: string;
    contentType?: IAgentResponseContentType;
}
interface IAgentContext {
    getContextArgs(): any;
    getHistory(): IAgentContextHistory;
    getUser(): IAgentContextUser;
    getHumanMessage(): IAgentHumanMessage;
}
interface IAgentCallbacks {
    onMessagePart(data: IAgentMessagePart): any;
}
interface IAgentMessagePart {
    contentChunk: string;
    contentType?: IAgentResponseContentType;
}
type IAgentResponseContentType = "markdown";
type IAgentContextUser = IUser;
type IAgentContextHistory = IMessage[];
type IAgentHumanMessage = IMessage;

interface IAgentManager {
    getDefaultAgent(): IAgent;
    getDefaultAgentKey(): string;
    getAgent(key: string): IAgent;
    getAgentPrimer(key: string): string;
    getAgentDisplayName(key: string): string;
    getAgentAvatarUrl(key: string): string | null | undefined;
    getAgentHumanRole(key: string): string;
    getAgentAIRole(key: string): string;
    listAvailableAgents(): string[];
}
interface IDefaultAgentManagerAgentsConfig {
    agent: IAgent;
    metadata: IAgentMetadata;
}
declare class DefaultAgentManager implements IAgentManager {
    private agents;
    private defaultAgentKey;
    constructor(agents: {
        [key: string]: IDefaultAgentManagerAgentsConfig;
    }, defaultAgentKey: string);
    getDefaultAgentKey(): string;
    getDefaultAgent(): IAgent;
    getAgent(key: string): IAgent;
    getAgentDisplayName(key: string): string;
    getAgentPrimer(key: string): string;
    getAgentHumanRole(key: string): string;
    getAgentAIRole(key: string): string;
    listAvailableAgents(): string[];
    getAgentAvatarUrl(key: string): string | null;
}

export { DefaultAgentManager, IAgent, IAgentCallbacks, IAgentContext, IAgentContextHistory, IAgentContextUser, IAgentHumanMessage, IAgentManager, IAgentMessagePart, IAgentMetadata, IAgentResponse, IAgentResponseContentType, IDefaultAgentManagerAgentsConfig };
