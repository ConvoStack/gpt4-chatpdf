"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../convostack-shared/dist/index.js
var require_dist = __commonJS({
  "../convostack-shared/dist/index.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    __export2(src_exports2, {
      AI_ROLE: () => AI_ROLE2,
      CONVERSATION_EVENT_KIND_CONVERSATION_METADATA: () => CONVERSATION_EVENT_KIND_CONVERSATION_METADATA,
      CONVERSATION_EVENT_KIND_MESSAGE: () => CONVERSATION_EVENT_KIND_MESSAGE,
      CONVERSATION_EVENT_KIND_MESSAGE_PART: () => CONVERSATION_EVENT_KIND_MESSAGE_PART,
      HUMAN_ROLE: () => HUMAN_ROLE2,
      addSecondsToDate: () => addSecondsToDate,
      generateRandomID: () => generateRandomID,
      unixTimestamp: () => unixTimestamp
    });
    module2.exports = __toCommonJS2(src_exports2);
    var CONVERSATION_EVENT_KIND_MESSAGE = "message";
    var CONVERSATION_EVENT_KIND_MESSAGE_PART = "message_part";
    var CONVERSATION_EVENT_KIND_CONVERSATION_METADATA = "conversation_metadata";
    var AI_ROLE2 = "AI";
    var HUMAN_ROLE2 = "Human";
    var import_crypto = __toESM2(require("crypto"));
    var generateRandomID = (length) => {
      return import_crypto.default.randomBytes(length).toString("hex");
    };
    var unixTimestamp = (date) => {
      if (!date) {
        date = /* @__PURE__ */ new Date();
      }
      return Math.floor(date.getTime() / 1e3);
    };
    var addSecondsToDate = (date, seconds) => {
      const newUnixTimestamp = unixTimestamp(date) + seconds;
      return new Date(newUnixTimestamp * 1e3);
    };
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DefaultAgentManager: () => DefaultAgentManager
});
module.exports = __toCommonJS(src_exports);

// src/agent-manager.ts
var import_shared = __toESM(require_dist());
var DefaultAgentManager = class {
  constructor(agents, defaultAgentKey) {
    if (Object.keys(agents).length === 0) {
      throw new Error("No agents provided");
    }
    if (!defaultAgentKey || !agents[defaultAgentKey]) {
      throw new Error(`Default agent key '${defaultAgentKey}' is not provided or not found in available agents`);
    }
    for (const key in agents) {
      if (!key) {
        throw new Error("Agent key cannot be an empty string");
      }
    }
    this.agents = agents;
    this.defaultAgentKey = defaultAgentKey;
  }
  getDefaultAgentKey() {
    return this.defaultAgentKey;
  }
  getDefaultAgent() {
    return this.agents[this.defaultAgentKey].agent;
  }
  getAgent(key) {
    const agent = this.agents[key];
    if (!agent) {
      throw new Error(`Agent with key '${key}' not found`);
    }
    return agent.agent;
  }
  getAgentDisplayName(key) {
    return this.agents[key].metadata.displayName;
  }
  getAgentPrimer(key) {
    return this.agents[key].metadata.primer;
  }
  getAgentHumanRole(key) {
    return import_shared.HUMAN_ROLE;
  }
  getAgentAIRole(key) {
    return import_shared.AI_ROLE;
  }
  listAvailableAgents() {
    return Object.keys(this.agents);
  }
  getAgentAvatarUrl(key) {
    return this.agents[key].metadata.avatarUrl;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DefaultAgentManager
});
