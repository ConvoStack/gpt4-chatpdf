import * as express from 'express';
import { IStorageEngine, IGQLAuthContext } from '@convostack/models';
import { IAuthProvider, ILoginParams, ISuccessfulAuthResponse, IRefreshParams } from '@convostack/auth';

interface IAuthJWTOptions {
    jwtSecret: string;
    allowAnonUsers?: boolean;
    requireUserVerificationHash?: boolean;
    userDataVerificationSecret?: string;
    accessTokenTTL?: number;
    refreshTokenTTL?: number;
}
declare class AuthJWT implements IAuthProvider {
    private storage;
    private options;
    constructor(storage: IStorageEngine, options: IAuthJWTOptions);
    private validateTokenFromAuthorizationValueIfProvided;
    getGQLAuthContextHTTP(req: express.Request): Promise<IGQLAuthContext>;
    getGQLAuthContextWS(connectionParams: Readonly<Record<string, unknown>>): Promise<IGQLAuthContext>;
    login(req: express.Request, { email, externalId, name, anonymousId, hash }: ILoginParams): Promise<ISuccessfulAuthResponse>;
    refresh(req: express.Request, params: IRefreshParams): Promise<ISuccessfulAuthResponse>;
    private sign;
    private validate;
    private generateAccessToken;
    private generateRefreshToken;
    private validateRefreshToken;
    private validateAccessToken;
    /***
     * Returns a string hash of the user data for verifying ConvoStack users. Ensure that you trim all of the strings that you send as leading/trailing spaces will cause issues with uniqueness.
     * @param hashSecret This is the 'secret' used for generating and verifying the hashes
     * @param userId This is the user ID of the user in the host platform. This is the ID that you give to your own users, not the ID that ConvoStack uses internally. Set to null if not available or used with ConvoStack. You must provide at least an email or userId when using user verification. We recommend providing a user ID in case you allow users to change/update their email addresses.
     * @param email User email address. Set to null if not available or used with ConvoStack. You must provide at least an email or userId when using user verification
     * @param name User's name. Set to null if not available or used with ConvoStack
     */
    private generateVerificationHash;
    private isValidEmail;
}

export { AuthJWT, IAuthJWTOptions };
