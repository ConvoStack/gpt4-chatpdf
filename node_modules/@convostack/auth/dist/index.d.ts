import { IGQLAuthContext } from '@convostack/models';
import * as express from 'express';

interface ILoginParams {
    email?: string;
    name?: string;
    hash?: string;
    anonymousId?: string;
    externalId?: string;
}
interface IAuthTokenData {
    token: string;
    expAt: number;
}
interface ISuccessfulAuthResponse {
    accessToken: IAuthTokenData;
    anonymousId: string;
    refreshToken: IAuthTokenData;
    anonymous: boolean;
    email: string;
    name: string;
    userId: string;
}
interface IRefreshParams {
    refreshToken: string;
}
interface IAuthProvider {
    getGQLAuthContextHTTP(req: express.Request): Promise<IGQLAuthContext>;
    getGQLAuthContextWS(connectionParams: Readonly<Record<string, unknown>>): Promise<IGQLAuthContext>;
    login(req: express.Request, params: ILoginParams): Promise<ISuccessfulAuthResponse>;
    refresh(req: express.Request, params: IRefreshParams): Promise<ISuccessfulAuthResponse>;
}

export { IAuthProvider, IAuthTokenData, ILoginParams, IRefreshParams, ISuccessfulAuthResponse };
