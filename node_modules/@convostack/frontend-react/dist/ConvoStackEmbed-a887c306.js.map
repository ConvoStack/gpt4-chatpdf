{"version":3,"file":"ConvoStackEmbed-a887c306.js","sources":["../src/components/Loader.tsx","../src/components/EmbeddableChat/UserInput.tsx","../src/components/EmbeddableChat/ConversationList.tsx","../src/components/EmbeddableChat/Header.tsx","../src/components/EmbeddableChat/MessageList.tsx","../src/components/EmbeddableChat/ConvoStackEmbed.tsx"],"sourcesContent":["interface LoaderProps {\n  className?: string;\n}\n\nconst Loader: React.FC<LoaderProps> = ({ className = \"\" }) => {\n  return (\n    <div className={className}>\n      <div className=\"border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto\">\n        <div className=\"animate-pulse flex space-x-4\">\n          <div className=\"rounded-full bg-slate-700 h-10 w-10\"></div>\n          <div className=\"flex-1 space-y-6 py-1\">\n            <div className=\"h-2 bg-slate-700 rounded\"></div>\n            <div className=\"space-y-3\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"h-2 bg-slate-700 rounded col-span-2\"></div>\n                <div className=\"h-2 bg-slate-700 rounded col-span-1\"></div>\n              </div>\n              <div className=\"h-2 bg-slate-700 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import { useSendMessageMutation } from \"@graphql\";\nimport { FormEvent, useContext, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { createApiClient } from \"../../api/apiClient\";\nimport { CustomIconsContext } from \"../../App\";\nimport SendMessageIcon from \"../../assets/SendMessageIcon\";\nimport useConvoStack from \"../../hooks/useConvoStack\";\nimport ThreeDotsAnimation from \"../../lottieAnimations/ThreeDotsAnimation\";\nimport { ConvoStackState } from \"../../redux/slice\";\n\ninterface UserInputProps {\n  embedId: string;\n  isAgentTyping: boolean;\n  activeConversationId: string | null;\n  isAgentMessageLoading: boolean;\n  setIsAgentMessageLoading: (arg: boolean) => void;\n}\n\nconst UserInput: React.FC<UserInputProps> = ({\n  embedId,\n  isAgentTyping,\n  activeConversationId,\n  isAgentMessageLoading,\n  setIsAgentMessageLoading,\n}) => {\n  const icons = useContext(CustomIconsContext);\n  const { context } = useConvoStack();\n  const { embedDefaultAgent, defaultAgent } = useSelector(\n    (state: any) => state.conversation as ConvoStackState\n  );\n  const { mutate: sendMessageMutation } = useSendMessageMutation(\n    createApiClient()\n  );\n  const [isMessageSent, setIsMessageSent] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const sendMessage = async (message: string) => {\n    await sendMessageMutation({\n      message: {\n        content: message,\n      },\n      conversationId: activeConversationId,\n      agent: embedDefaultAgent[embedId] || defaultAgent,\n      context: context,\n    });\n    setIsMessageSent(true);\n  };\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n  };\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    if (!isAgentMessageLoading) {\n      await sendMessage(inputValue);\n      setInputValue(\"\");\n      setIsAgentMessageLoading(true);\n      event.preventDefault();\n    }\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === \"Enter\" && (isAgentTyping || !inputValue)) {\n      event.preventDefault();\n    } else if (event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault();\n      handleSubmit(event as unknown as FormEvent<HTMLFormElement>);\n      if (textarea !== null) textarea.style.height = \"auto\";\n    }\n  };\n  const handleButtonSubmit = async (inputValue: string) => {\n    if (!inputValue || isAgentTyping) return null;\n    if (!isAgentMessageLoading) {\n      console.log(\"hit\");\n      await sendMessage(inputValue);\n      setInputValue(\"\");\n      setIsAgentMessageLoading(true);\n    }\n    if (textarea !== null) textarea.style.height = \"auto\";\n  };\n  const textarea =\n    typeof document !== \"undefined\" ? document.querySelector(\"textarea\") : null;\n  if (textarea) {\n    textarea.addEventListener(\"input\", function () {\n      this.style.height = \"auto\";\n      this.style.height = this.scrollHeight + \"px\";\n    });\n  }\n\n  useEffect(() => {\n    if (isMessageSent) {\n      const screenWidth =\n        typeof window !== \"undefined\" ? window.innerWidth : 650;\n      if (screenWidth < 640) {\n        textareaRef?.current?.blur();\n      }\n      setIsMessageSent(false);\n    }\n  }, [isMessageSent]);\n\n  return (\n    <div className=\"border-t-1\">\n      <div className=\"w-full min-h-14 bg-off-white flex items-center max-h-36 scrollbar-hidden py-4\">\n        <textarea\n          placeholder=\"Send a message...\"\n          ref={textareaRef}\n          value={inputValue}\n          onChange={handleChange}\n          rows={1}\n          className=\"font-sans h-auto px-4 max-h-36 w-full bg-off-white text-slate-500 scrollbar-hidden resize-none focus:outline-none focus:ring-blue-400 focus:ring-0\"\n          onKeyDown={handleKeyDown}\n        />\n        {isAgentTyping ? (\n          <ThreeDotsAnimation className=\"mr-2 w-10 h-10 -mb-6 items-center\" />\n        ) : (\n          <button\n            onClick={() => handleButtonSubmit(inputValue)}\n            className=\"bg-transparent\"\n          >\n            {icons?.sendMessageIcon || (\n              <SendMessageIcon className=\"h-6 w-6 mr-2\" color=\"black\" />\n            )}\n          </button>\n        )}\n      </div>\n      <p className=\"font-sans text-center text-xs text-gray-400 bg-neutral-200\">\n        Powered by{\" \"}\n        <a\n          href=\"https://convostack.ai\"\n          target=\"_blank\"\n          className=\"font-semibold\"\n        >\n          ConvoStack.ai\n        </a>\n      </p>\n    </div>\n  );\n};\n\nexport default UserInput;\n","import { useGetConversationsQuery } from \"@graphql\";\nimport { useContext, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { createApiClient } from \"../../api/apiClient\";\nimport { CustomIconsContext } from \"../../App\";\nimport PencilSquareIcon from \"../../assets/PencilSquareIcon\";\nimport useConvoStack from \"../../hooks/useConvoStack\";\nimport { ConvoStackState } from \"../../redux/slice\";\nimport { CustomEmbedStyling } from \"../../types\";\nimport ConversationListItem from \"../ConversationListItem\";\nimport LoaderSpinner from \"../LoaderSpinner\";\n\ninterface ConversationListProps {\n  embedId: string;\n  style: React.CSSProperties;\n  customStyling?: CustomEmbedStyling;\n}\n\nconst ConversationList: React.FC<ConversationListProps> = ({\n  embedId,\n  style,\n  customStyling,\n}) => {\n  const icons = useContext(CustomIconsContext);\n  const { openConversation, context } = useConvoStack();\n  const { embedDefaultAgent, defaultAgent } = useSelector(\n    (state: any) => state.conversation as ConvoStackState\n  );\n  const { data, isFetching, isLoading } = useGetConversationsQuery(\n    createApiClient(),\n    undefined,\n    {\n      staleTime: 0,\n    }\n  );\n  const conversationArray =\n    data !== undefined &&\n    data?.getConversations !== null &&\n    data?.getConversations !== undefined &&\n    data?.getConversations.length > 0\n      ? data.getConversations\n      : [];\n\n  useEffect(() => {\n    if (!isFetching && conversationArray.length === 0) {\n      openConversation(\n        null,\n        embedDefaultAgent[embedId] || defaultAgent,\n        context,\n        embedId\n      );\n    }\n  }, [isFetching]);\n\n  return (\n    <>\n      <div\n        className={`h-14 py-4 ${\n          customStyling?.headerColor ? \"\" : \"bg-blue-gradient\"\n        } flex justify-between items-center`}\n        style={{ backgroundColor: customStyling?.headerColor }}\n      >\n        <div\n          className=\"left-0 hover:cursor-pointer\"\n          onClick={() =>\n            openConversation(\n              null,\n              embedDefaultAgent[embedId] || defaultAgent,\n              context,\n              embedId\n            )\n          }\n        >\n          {icons?.createNewConversationIcon || (\n            <PencilSquareIcon\n              className=\"w-6 h-6 ml-3\"\n              color={customStyling?.iconsColor || \"white\"}\n            />\n          )}\n        </div>\n        <div className=\"flex mx-auto\">\n          <p\n            className=\"font-sans font-semibold mx-auto\"\n            style={{ color: customStyling?.headerTextColor || \"white\" }}\n          >\n            {customStyling?.headerText || \"ConvoStack Chat\"}\n          </p>\n        </div>\n      </div>\n      <div\n        className=\"bg-white overflow-y-auto flex flex-col pb-4\"\n        style={style}\n      >\n        {isLoading ? (\n          <LoaderSpinner className=\"mx-auto mt-8\" />\n        ) : (\n          <>\n            {conversationArray.length !== 0 &&\n              conversationArray.map((item, index) => (\n                <ConversationListItem\n                  key={index}\n                  title={item.title || \"\"}\n                  headline={item.lastMessage?.content || \"\"}\n                  updatedAt={item.lastMessage?.createdAt || \"\"}\n                  conversationId={item.id}\n                  avatarUrl={item.agent.avatarUrl || \"\"}\n                  embedId={embedId}\n                />\n              ))}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ConversationList;\n","import { useContext } from \"react\";\nimport { CustomIconsContext } from \"../../App\";\nimport ArrowLeftIcon from \"../../assets/ArrowLeftIcon\";\nimport useConvoStack from \"../../hooks/useConvoStack\";\nimport { setIsEmbedConversationListVisible } from \"../../redux/slice\";\nimport { useDispatch } from \"react-redux\";\nimport { CustomEmbedStyling } from \"../../types\";\n\ninterface HeaderProps {\n  embedId: string;\n  customStyling?: CustomEmbedStyling;\n}\n\nconst Header: React.FC<HeaderProps> = ({ embedId, customStyling }) => {\n  const icons = useContext(CustomIconsContext);\n  const dispatch = useDispatch();\n  const { dropSubscription } = useConvoStack();\n  return (\n    <div className=\"w-full\">\n      <div\n        className={`w-full h-14 ${\n          customStyling?.headerColor ? \"\" : \"bg-blue-gradient\"\n        } flex flex-wrap items-center py-4`}\n        style={{ backgroundColor: customStyling?.headerColor }}\n      >\n        <div\n          className=\"left-0 hover:cursor-pointer\"\n          onClick={() => {\n            dispatch(\n              setIsEmbedConversationListVisible({\n                embedId: embedId,\n                value: true,\n              })\n            );\n            dropSubscription(embedId);\n          }}\n        >\n          {icons?.backArrowIcon || (\n            <ArrowLeftIcon\n              className=\"w-6 h-6 ml-3\"\n              color={customStyling?.iconsColor || \"white\"}\n            />\n          )}\n        </div>\n        <div className=\"flex mx-auto\">\n          <p\n            className=\"font-sans font-semibold mx-auto\"\n            style={{ color: customStyling?.headerTextColor || \"white\" }}\n          >\n            {customStyling?.headerText || \"ConvoStack Chat\"}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport ChatLoadingAnimation from \"../../lottieAnimations/ChatLoadingAnimation\";\nimport LoaderSpinner from \"../LoaderSpinner\";\nimport Message, { MessageProps } from \"../Message\";\n\ninterface MessageSent {\n  content: string;\n  role: string;\n}\n\ninterface MessageListProps {\n  isAgentTyping: boolean;\n  setIsAgentTyping: (arg: boolean) => void;\n  data: any;\n  style: React.CSSProperties;\n  CustomMessage?: React.ComponentType<MessageProps>;\n  isAgentMessageLoading: boolean;\n  setIsAgentMessageLoading: (arg: boolean) => void;\n}\n\nconst MessageList: React.FC<MessageListProps> = ({\n  isAgentTyping,\n  setIsAgentTyping,\n  data,\n  style,\n  CustomMessage,\n  isAgentMessageLoading,\n  setIsAgentMessageLoading,\n}) => {\n  const MessageComponentToRender = CustomMessage ? CustomMessage : Message;\n  const [isLoading, setIsLoading] = useState(true);\n  const [width, setWidth] = useState(\"130px\");\n  const [conversationEvents, setConversationEvents] = useState<MessageSent[]>(\n    []\n  );\n  const [streams, setStreams] = useState<string[]>([]);\n  const [showMessageLoading, setShowMessageLoading] = useState(false);\n\n  const onNext = (data: any) => {\n    const conversationEvent = data.data?.subscribeConversationEvents as any;\n    if (conversationEvent.kind === \"message_part\") {\n      setStreams((prevStreams) => [\n        ...prevStreams,\n        conversationEvent.payload.chunk,\n      ]);\n    } else if (conversationEvent.kind === \"message\") {\n      if (conversationEvent.payload.role === \"AI\") {\n        setIsAgentMessageLoading(false);\n      }\n      setConversationEvents((prevConversationEvents) => [\n        ...prevConversationEvents,\n        {\n          content: conversationEvent.payload.content,\n          role: conversationEvent.payload.role,\n        },\n      ]);\n      setStreams([]);\n    } else if (conversationEvent.kind === \"conversation_metadata\") {\n      setConversationEvents((prevConversationEvents) => [\n        ...prevConversationEvents,\n        { content: conversationEvent.payload.primer, role: \"AI\" },\n      ]);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (data !== null) {\n      isAgentTyping && handleScrollToBottom(\"auto\");\n      onNext(data);\n    } else {\n      setIsLoading(true);\n      setConversationEvents([]);\n    }\n  }, [data]);\n\n  const outerDiv = useRef() as MutableRefObject<HTMLDivElement>;\n  const innerDiv = useRef() as MutableRefObject<HTMLDivElement>;\n  const [maxScrollTop, setMaxScrollTop] = useState<number>(0);\n\n  const handleScrollToBottom = (behavior: ScrollBehavior | undefined) => {\n    if (outerDiv.current.scrollTop < maxScrollTop) {\n      return;\n    }\n    const outerDivHeight = outerDiv.current.clientHeight;\n    const innerDivHeight = innerDiv.current.clientHeight;\n    outerDiv.current.scrollTo({\n      top: innerDivHeight - outerDivHeight,\n      left: 0,\n      behavior: behavior,\n    });\n    if (maxScrollTop < outerDiv.current.scrollTop)\n      setMaxScrollTop(outerDiv.current.scrollTop);\n  };\n\n  useEffect(() => {\n    handleScrollToBottom(\"smooth\");\n  }, [conversationEvents, showMessageLoading, streams]);\n\n  useEffect(() => {\n    if (streams.length === 0 && isAgentTyping) {\n      setIsAgentTyping(false);\n    } else if (streams.length > 0 && !isAgentTyping) {\n      setIsAgentTyping(true);\n      setIsAgentMessageLoading(false);\n      setShowMessageLoading(false);\n    }\n  }, [streams.length]);\n\n  useEffect(() => {\n    const getWidth = () => {\n      if (outerDiv.current) {\n        const newWidth =\n          outerDiv.current.getBoundingClientRect().width.toString() + \"px\";\n        width !== newWidth && setWidth(newWidth);\n      }\n    };\n    getWidth();\n    typeof window !== \"undefined\" &&\n      window.addEventListener(\"resize\", getWidth);\n    return () => {\n      typeof window !== \"undefined\" &&\n        window.removeEventListener(\"resize\", getWidth);\n    };\n  }, []);\n\n  useEffect(() => {\n    let timeoutId: number;\n\n    if (isAgentMessageLoading) {\n      timeoutId = setTimeout(() => {\n        setShowMessageLoading(true);\n      }, 1500);\n    }\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [isAgentMessageLoading]);\n\n  return (\n    <div ref={outerDiv} className=\"bg-white h-full overflow-auto\" style={style}>\n      <div ref={innerDiv} className=\"flex flex-col\">\n        {isLoading ? (\n          <LoaderSpinner className=\"mx-auto mt-12 z-0\" />\n        ) : (\n          <>\n            {conversationEvents.map(\n              (message, index) =>\n                message.content && (\n                  <MessageComponentToRender\n                    key={index}\n                    width={width}\n                    message={{ text: message.content, author: message.role }}\n                    className={\n                      index === conversationEvents.length - 1 &&\n                      streams.length === 0\n                        ? \"mb-3\"\n                        : \"\"\n                    }\n                  />\n                )\n            )}\n            {isAgentMessageLoading && showMessageLoading && (\n              <ChatLoadingAnimation className=\"ml-4 w-10 h-10 items-center\" />\n            )}\n            {streams.length !== 0 && (\n              <MessageComponentToRender\n                width={width}\n                message={{ text: streams.join(\"\"), author: \"AI\" }}\n                className={\"mb-3\"}\n              />\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MessageList;\n","import { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Loader from \"../Loader\";\nimport UserInput from \"./UserInput\";\nimport ConversationList from \"./ConversationList\";\nimport Header from \"./Header\";\nimport MessageList from \"./MessageList\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  ConvoStackState,\n  setEmbedConversationId,\n  setEmbedData,\n  setEmbedDefaultAgent,\n  setIsEmbedConversationListVisible,\n} from \"../../redux/slice\";\nimport { CustomEmbedStyling } from \"../../types\";\nimport { MessageProps } from \"../Message\";\n\nexport interface ConvoStackEmbedProps {\n  embedId: string;\n  defaultAgent?: string | null;\n  customStyling?: CustomEmbedStyling;\n  CustomMessage?: React.ComponentType<MessageProps>;\n}\n\nconst ConvoStackEmbed: React.FC<ConvoStackEmbedProps> = ({\n  embedId,\n  defaultAgent,\n  customStyling,\n  CustomMessage,\n}) => {\n  const { graphqlUrl } = useSelector(\n    (state: any) => state.conversation as ConvoStackState\n  );\n  const [isAgentTyping, setIsAgentTyping] = useState(false);\n  const dispatch = useDispatch();\n  const outerDiv = useRef() as MutableRefObject<HTMLDivElement>;\n  const [height, setHeight] = useState<null | string>(null);\n  const [isAgentMessageLoading, setIsAgentMessageLoading] = useState(false);\n\n  useEffect(() => {\n    dispatch(setEmbedConversationId({ embedId: embedId, value: null }));\n    dispatch(\n      setIsEmbedConversationListVisible({ embedId: embedId, value: true })\n    );\n    dispatch(setEmbedData({ embedId: embedId, value: null }));\n    dispatch(setEmbedDefaultAgent({ embedId: embedId, value: defaultAgent }));\n  }, [embedId]);\n\n  useEffect(() => {\n    dispatch(setEmbedDefaultAgent({ embedId: embedId, value: defaultAgent }));\n  }, [embedId, defaultAgent]);\n\n  const embedActiveConversationId = useSelector(\n    (state: any) => state.conversation.embedActiveConversationId[embedId]\n  );\n  const isEmbedConversationListVisible = useSelector(\n    (state: any) => state.conversation.isEmbedConversationListVisible[embedId]\n  );\n  const embedData = useSelector(\n    (state: any) => state.conversation.embedData[embedId]\n  );\n\n  useEffect(() => {\n    const getHeight = () => {\n      if (outerDiv.current) {\n        const newHeight =\n          outerDiv.current.getBoundingClientRect().height.toString() + \"px\";\n        height !== newHeight && setHeight(newHeight);\n      }\n    };\n    getHeight();\n    typeof window !== \"undefined\" &&\n      window.addEventListener(\"resize\", getHeight);\n    return () => {\n      typeof window !== \"undefined\" &&\n        window.removeEventListener(\"resize\", getHeight);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={outerDiv}\n      className=\"convostack overflow-hidden\"\n      style={{\n        width: customStyling?.embedWidth || \"auto\",\n        height: customStyling?.embedHeight || \"400px\",\n        flex: customStyling?.embedFlex || \"\",\n      }}\n    >\n      {graphqlUrl === \"\" ? (\n        <Loader />\n      ) : !isEmbedConversationListVisible ? (\n        <div\n          className=\"flex flex-col\"\n          style={{ height: customStyling?.embedHeight || \"400px\" }}\n        >\n          <Header embedId={embedId} customStyling={customStyling} />\n          <MessageList\n            style={{ height: `calc(${height} - 112px` }}\n            isAgentTyping={isAgentTyping}\n            setIsAgentTyping={setIsAgentTyping}\n            data={embedData}\n            CustomMessage={CustomMessage}\n            isAgentMessageLoading={isAgentMessageLoading}\n            setIsAgentMessageLoading={setIsAgentMessageLoading}\n          />\n          <UserInput\n            embedId={embedId}\n            isAgentTyping={isAgentTyping}\n            activeConversationId={embedActiveConversationId}\n            isAgentMessageLoading={isAgentMessageLoading}\n            setIsAgentMessageLoading={setIsAgentMessageLoading}\n          />\n        </div>\n      ) : (\n        <ConversationList\n          embedId={embedId}\n          style={{ height: `calc(${height} - 56px` }}\n          customStyling={customStyling}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ConvoStackEmbed;\n"],"names":["Loader","className","jsx","jsxs","UserInput","embedId","isAgentTyping","activeConversationId","isAgentMessageLoading","setIsAgentMessageLoading","icons","useContext","CustomIconsContext","context","useConvoStack","embedDefaultAgent","defaultAgent","useSelector","state","sendMessageMutation","useSendMessageMutation","createApiClient","isMessageSent","setIsMessageSent","useState","textareaRef","useRef","sendMessage","message","inputValue","setInputValue","handleChange","event","handleSubmit","handleKeyDown","textarea","handleButtonSubmit","useEffect","_a","ThreeDotsAnimation","SendMessageIcon","ConversationList","style","customStyling","openConversation","data","isFetching","isLoading","useGetConversationsQuery","conversationArray","Fragment","PencilSquareIcon","LoaderSpinner","item","index","ConversationListItem","_b","Header","dispatch","useDispatch","dropSubscription","setIsEmbedConversationListVisible","ArrowLeftIcon","MessageList","setIsAgentTyping","CustomMessage","MessageComponentToRender","Message","setIsLoading","width","setWidth","conversationEvents","setConversationEvents","streams","setStreams","showMessageLoading","setShowMessageLoading","onNext","conversationEvent","prevStreams","prevConversationEvents","handleScrollToBottom","outerDiv","innerDiv","maxScrollTop","setMaxScrollTop","behavior","outerDivHeight","innerDivHeight","getWidth","newWidth","timeoutId","ChatLoadingAnimation","ConvoStackEmbed","graphqlUrl","height","setHeight","setEmbedConversationId","setEmbedData","setEmbedDefaultAgent","embedActiveConversationId","isEmbedConversationListVisible","embedData","getHeight","newHeight"],"mappings":"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"}