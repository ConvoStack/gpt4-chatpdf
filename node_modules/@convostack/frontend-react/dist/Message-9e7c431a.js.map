{"version":3,"file":"Message-9e7c431a.js","sources":["../../../node_modules/react-markdown/lib/uri-transformer.js","../../../node_modules/is-buffer/index.js","../../../node_modules/unist-util-stringify-position/lib/index.js","../../../node_modules/vfile-message/lib/index.js","../../../node_modules/vfile/lib/minpath.browser.js","../../../node_modules/vfile/lib/minproc.browser.js","../../../node_modules/vfile/lib/minurl.shared.js","../../../node_modules/vfile/lib/minurl.browser.js","../../../node_modules/vfile/lib/index.js","../../../node_modules/bail/index.js","../../../node_modules/extend/index.js","../../../node_modules/is-plain-obj/index.js","../../../node_modules/trough/index.js","../../../node_modules/unified/lib/index.js","../../../node_modules/mdast-util-to-string/lib/index.js","../../../node_modules/micromark-util-chunked/index.js","../../../node_modules/micromark-util-combine-extensions/index.js","../../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../../node_modules/micromark-util-character/index.js","../../../node_modules/micromark-factory-space/index.js","../../../node_modules/micromark/lib/initialize/content.js","../../../node_modules/micromark/lib/initialize/document.js","../../../node_modules/micromark-util-classify-character/index.js","../../../node_modules/micromark-util-resolve-all/index.js","../../../node_modules/micromark-core-commonmark/lib/attention.js","../../../node_modules/micromark-core-commonmark/lib/autolink.js","../../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../../node_modules/decode-named-character-reference/index.dom.js","../../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../../node_modules/micromark-core-commonmark/lib/code-text.js","../../../node_modules/micromark-util-subtokenize/index.js","../../../node_modules/micromark-core-commonmark/lib/content.js","../../../node_modules/micromark-factory-destination/index.js","../../../node_modules/micromark-factory-label/index.js","../../../node_modules/micromark-factory-title/index.js","../../../node_modules/micromark-factory-whitespace/index.js","../../../node_modules/micromark-util-normalize-identifier/index.js","../../../node_modules/micromark-core-commonmark/lib/definition.js","../../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../../node_modules/micromark-util-html-tag-name/index.js","../../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../../node_modules/micromark-core-commonmark/lib/html-text.js","../../../node_modules/micromark-core-commonmark/lib/label-end.js","../../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../../node_modules/micromark-core-commonmark/lib/list.js","../../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../../node_modules/micromark/lib/initialize/flow.js","../../../node_modules/micromark/lib/initialize/text.js","../../../node_modules/micromark/lib/create-tokenizer.js","../../../node_modules/micromark/lib/constructs.js","../../../node_modules/micromark/lib/parse.js","../../../node_modules/micromark/lib/preprocess.js","../../../node_modules/micromark/lib/postprocess.js","../../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../../node_modules/micromark-util-decode-string/index.js","../../../node_modules/mdast-util-from-markdown/lib/index.js","../../../node_modules/remark-parse/lib/index.js","../../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../../node_modules/micromark-util-sanitize-uri/index.js","../../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../../node_modules/mdast-util-to-hast/lib/revert.js","../../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../../node_modules/unist-util-position/lib/index.js","../../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../../node_modules/trim-lines/index.js","../../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../../node_modules/unist-util-is/lib/index.js","../../../node_modules/unist-util-visit-parents/lib/index.js","../../../node_modules/unist-util-visit/lib/index.js","../../../node_modules/unist-util-generated/lib/index.js","../../../node_modules/mdast-util-definitions/lib/index.js","../../../node_modules/mdast-util-to-hast/lib/state.js","../../../node_modules/mdast-util-to-hast/lib/footer.js","../../../node_modules/mdast-util-to-hast/lib/index.js","../../../node_modules/remark-rehype/lib/index.js","../../../node_modules/prop-types/lib/ReactPropTypesSecret.js","../../../node_modules/prop-types/lib/has.js","../../../node_modules/prop-types/checkPropTypes.js","../../../node_modules/prop-types/factoryWithTypeCheckers.js","../../../node_modules/prop-types/factoryWithThrowingShims.js","../../../node_modules/prop-types/index.js","../../../node_modules/property-information/lib/util/schema.js","../../../node_modules/property-information/lib/util/merge.js","../../../node_modules/property-information/lib/normalize.js","../../../node_modules/property-information/lib/util/info.js","../../../node_modules/property-information/lib/util/types.js","../../../node_modules/property-information/lib/util/defined-info.js","../../../node_modules/property-information/lib/util/create.js","../../../node_modules/property-information/lib/xlink.js","../../../node_modules/property-information/lib/xml.js","../../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../../node_modules/property-information/lib/xmlns.js","../../../node_modules/property-information/lib/aria.js","../../../node_modules/property-information/lib/html.js","../../../node_modules/property-information/lib/svg.js","../../../node_modules/property-information/lib/find.js","../../../node_modules/property-information/lib/hast-to-react.js","../../../node_modules/property-information/index.js","../../../node_modules/react-markdown/lib/rehype-filter.js","../../../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../../../node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js","../../../node_modules/react-markdown/node_modules/react-is/index.js","../../../node_modules/hast-util-whitespace/index.js","../../../node_modules/space-separated-tokens/index.js","../../../node_modules/comma-separated-tokens/index.js","../../../node_modules/inline-style-parser/index.js","../../../node_modules/style-to-object/index.js","../../../node_modules/react-markdown/lib/ast-to-react.js","../../../node_modules/react-markdown/lib/react-markdown.js","../../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../../node_modules/micromark-extension-gfm/index.js","../../../node_modules/ccount/index.js","../../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../../node_modules/mdast-util-find-and-replace/lib/index.js","../../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../../node_modules/mdast-util-to-markdown/lib/util/association.js","../../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../../../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../../node_modules/mdast-util-to-markdown/lib/util/safe.js","../../../node_modules/mdast-util-to-markdown/lib/util/track.js","../../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../../node_modules/markdown-table/index.js","../../../node_modules/mdast-util-gfm-table/lib/index.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../../node_modules/mdast-util-gfm/lib/index.js","../../../node_modules/remark-gfm/index.js","../src/components/Message.tsx"],"sourcesContent":["const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","module.exports = Function.call.bind(Object.prototype.hasOwnProperty);\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = require('./lib/has');\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) { /**/ }\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +\n              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactIs = require('react-is');\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar has = require('./lib/has');\nvar checkPropTypes = require('./checkPropTypes');\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bigint: createPrimitiveTypeChecker('bigint'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message, data) {\n    this.message = message;\n    this.data = data && typeof data === 'object' ? data: {};\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError(\n          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),\n          {expectedType: expectedType}\n        );\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (arguments.length > 1) {\n          printWarning(\n            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n          );\n        } else {\n          printWarning('Invalid argument supplied to oneOf, expected an array.');\n        }\n      }\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var expectedTypes = [];\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);\n        if (checkerResult == null) {\n          return null;\n        }\n        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {\n          expectedTypes.push(checkerResult.data.expectedType);\n        }\n      }\n      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function invalidValidatorError(componentName, location, propFullName, key, type) {\n    return new PropTypeError(\n      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +\n      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'\n    );\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (typeof checker !== 'function') {\n          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (has(shapeTypes, key) && typeof checker !== 'function') {\n          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n        }\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","/**\n * @license React\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n          case REACT_SUSPENSE_LIST_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_SERVER_CONTEXT_TYPE:\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n}\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar SuspenseList = REACT_SUSPENSE_LIST_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false;\nvar hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n    }\n  }\n\n  return false;\n}\nfunction isConcurrentMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {\n      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n    }\n  }\n\n  return false;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\nfunction isSuspenseList(object) {\n  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;\n}\n\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.SuspenseList = SuspenseList;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isSuspenseList = isSuspenseList;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                // @ts-expect-error: to do: update `mdast-util-types` to allow explicit `undefined`s.\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      // @ts-expect-error: custom field.\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      // @ts-expect-error It’s fine.\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","import ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nexport interface MessageProps {\n  width: string;\n  message: { text: string; author: string };\n  className?: string;\n}\n\nconst Message: React.FC<MessageProps> = ({\n  width,\n  message,\n  className = \"\",\n}) => {\n  return (\n    <div\n      className={`font-sans rounded-lg px-4 py-2 break-words mt-2 ${\n        message.author === \"AI\"\n          ? \"bg-slate-200 mr-auto ml-4 inline-block text-black\"\n          : \"bg-blue-500 ml-auto mr-4 inline-block text-white\"\n      } ${className}`}\n      style={{ whiteSpace: \"pre-line\", maxWidth: `calc(${width} - 130px)` }}\n    >\n      <ReactMarkdown\n        children={message.text}\n        remarkPlugins={[remarkGfm]}\n        className=\"text-sm text-left\"\n        components={{\n          h1: ({ ...props }) => <h1 className=\"text-4xl\" {...props} />,\n          h2: ({ ...props }) => <h2 className=\"text-3xl\" {...props} />,\n          h3: ({ ...props }) => <h3 className=\"text-2xl\" {...props} />,\n          ol: ({ ...props }) => (\n            <ol className=\"list-decimal list-inside\" {...props} />\n          ),\n          ul: ({ ...props }) => (\n            <ul className=\"list-disc list-inside\" {...props} />\n          ),\n          blockquote: ({ ...props }) => (\n            <blockquote\n              className=\"border-l-4 border-gray-300 pl-4 my-4\"\n              {...props}\n            />\n          ),\n          code: ({ ...props }) => (\n            <code\n              className=\"text-sm bg-gray-200 p-1 rounded-md whitespace-pre-wrap break-all\"\n              {...props}\n              style={{ whiteSpace: \"pre-line\" }}\n            />\n          ),\n          a: ({ ...props }) => (\n            <a className=\"underline\" target=\"_blank\" {...props} />\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Message;\n"],"names":["protocols","uriTransformer","uri","url","first","colon","index","protocol","isBuffer","obj","stringifyPosition","value","position","point","pos","VFileMessage","reason","place","origin","parts","path","basename","dirname","extname","join","ext","assertPath","start","end","seenNonSlash","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","code","segments","joined","normalize","absolute","normalizeString","allowAboveRoot","result","lastSegmentLength","lastSlash","dots","lastSlashIndex","proc","cwd","isUrl","fileUrlOrPath","urlToPath","error","getPathFromURLPosix","pathname","third","order","VFile","options","buffer","prop","assertNonEmpty","assertPart","stem","encoding","message","part","name","bufferLike","bail","hasOwn","toStr","defineProperty","gOPD","isArray","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","key","setProperty","target","getProperty","extend","src","copy","copyIsArray","clone","i","length","deep","prototype","trough","fns","pipeline","run","use","values","middlewareIndex","callback","next","output","fn","wrap","middelware","middleware","called","wrapped","parameters","fnExpectsCallback","done","exception","then","unified","base","own","transformers","attachers","namespace","frozen","freezeIndex","processor","data","freeze","parse","stringify","runSync","process","processSync","destination","assertUnfrozen","attacher","transformer","settings","addPlugin","addList","addPreset","add","plugin","plugins","thing","entry","isPlainObj","doc","file","vfile","Parser","assertParser","newable","node","Compiler","assertCompiler","assertNode","executor","resolve","reject","tree","complete","assertDone","looksLikeAVFileValue","keys","asyncName","looksLikeAVFile","emptyOptions","toString","includeImageAlt","includeHtml","one","all","splice","list","remove","items","chunkStart","push","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","unicodePunctuationRegex","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","check","factorySpace","effects","ok","type","max","limit","size","prefix","content","initializeContent","contentStart","afterContentStartConstruct","paragraphInitial","previous","lineStart","token","document","initializeDocument","containerConstruct","tokenizeContainer","self","stack","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","stream","seen","nok","classifyCharacter","resolveAll","events","context","attention","tokenizeAttention","resolveAllAttention","open","group","text","openingSequence","closingSequence","nextEvents","offset","movePoint","attentionMarkers","marker","sequence","after","close","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","blankLine","tokenizeBlankLine","afterWhitespace","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","exit","state","characterEscape","tokenizeCharacterEscape","element","decodeNamedCharacterReference","characterReference","char","tokenizeCharacterReference","test","numeric","codeFenced","tokenizeCodeFenced","closingFenceConstruct","tokenizeClosingFence","nonLazyLine","tokenizeNonLazyLine","tail","initialPrefix","sizeOpen","sequenceOpen","infoOpen","openAfter","info","infoAfter","meta","contentContinue","closingSequenceStart","closingSequenceEnd","codeIndented","tokenizeCodeIndented","indentedContent","tokenizeIndentedContent","afterStartPrefix","afterPrefix","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","enter","gap","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","slice","tokenizeContent","resolveContent","continuationConstruct","tokenizeContinuation","contentEnd","startLookahead","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","atBreak","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","normalizeIdentifier","definition","tokenizeDefinition","titleConstruct","tokenizeTitle","identifier","labelAfter","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","fenceOpenInside","headingBreak","htmlBlockNames","htmlRawNames","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","nextBlankConstruct","tokenizeNextBlank","kind","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","htmlContinueStart","htmlLineEnd","continuationRawEndTag","htmlText","tokenizeHtmlText","returnState","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","fullReferenceConstruct","tokenizeFullReference","collapsedReferenceConstruct","tokenizeCollapsedReference","media","labelStart","defined","balanced","afterLabelEnd","destinationAfter","between","afterLabel","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","atMarker","inside","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","flow","initializeFlow","initial","atBlankEnding","afterConstruct","resolver","createResolver","string","initializeFactory","field","initializeText","resolveAllLineSuffixes","notText","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","createTokenizer","parser","initialize","from","columnStart","resolveAllConstructs","consume","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","sliceStream","sliceSerialize","now","defineSkip","write","main","addResult","expandTabs","serializeChunks","sliceChunks","accountForPotentialSkip","chunkIndex","go","fields","construct","_","onreturn","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","map","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","atTab","contentInitial","flowInitial","insideSpan","resolveText","disable","defaultConstructs","create","creator","search","preprocess","column","atCarriageReturn","preprocessor","match","endPosition","postprocess","decodeNumericCharacterReference","characterEscapeOrReference","decodeString","decode","$0","$1","$2","head","hex","fromMarkdown","compiler","config","opener","link","onenterdata","codeFlow","emphasis","hardBreak","html","image","listItem","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","resume","setData","getData","listStack","prepareList","handler","defaultOnError","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","and","errorHandler","onExitError","ancestor","depth","referenceType","fragment","children","d","combined","remarkParse","blockquote","lang","properties","strikethrough","normalizeUri","skip","replace","footnoteReference","id","safeId","counter","reuseCounter","sup","footnote","footnoteById","no","revert","subtype","suffix","contents","imageReference","inlineCode","linkReference","parent","results","loose","listLoose","listItemLoose","child","spread","root","pointStart","pointEnd","table","rows","firstRow","tableContent","body","tableRow","siblings","align","cellIndex","cells","cell","alignValue","tableCell","tab","space","trimLines","source","last","lines","trimLine","handlers","ignore","convert","typeFactory","anyFactory","propsFactory","castFactory","tests","checks","any","assertion","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","overload","generated","definitions","cache","clean","createState","dangerous","patch","applyData","oneBound","allBound","augment","ctx","props","to","hName","hChildren","hProperties","defaultUnknownHandler","nodes","footer","listItems","referenceIndex","backReferences","backReference","tailTail","toHast","foot","remarkRehype","bridge","mutate","remarkRehype$1","ReactPropTypesSecret","ReactPropTypesSecret_1","has","printWarning","require$$0","loggedTypeFailures","require$$1","checkPropTypes","typeSpecs","location","componentName","getStack","typeSpecName","err","ex","checkPropTypes_1","ReactIs","assign","require$$2","require$$3","require$$4","emptyFunctionThatReturnsNull","factoryWithTypeCheckers","isValidElement","throwOnDirectAccess","ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","iteratorFn","ANONYMOUS","ReactPropTypes","createPrimitiveTypeChecker","createAnyTypeChecker","createArrayOfTypeChecker","createElementTypeChecker","createElementTypeTypeChecker","createInstanceTypeChecker","createNodeChecker","createObjectOfTypeChecker","createEnumTypeChecker","createUnionTypeChecker","createShapeTypeChecker","createStrictShapeTypeChecker","x","y","PropTypeError","createChainableTypeChecker","validate","manualPropTypeCallCache","manualPropTypeWarningCount","checkType","isRequired","propName","propFullName","secret","cacheKey","chainedCheckType","expectedType","propValue","propType","getPropType","preciseType","getPreciseType","typeChecker","expectedClass","expectedClassName","actualClassName","getClassName","expectedValues","valuesString","arrayOfTypeCheckers","checker","getPostfixForTypeWarning","expectedTypes","checkerResult","expectedTypesMessage","isNode","invalidValidatorError","shapeTypes","allKeys","iterator","isSymbol","emptyFunction","emptyFunctionWithReset","factoryWithThrowingShims","shim","getShim","propTypesModule","Schema","property","normal","merge","Info","attribute","powers","boolean","increment","booleanish","overloadedBoolean","number","spaceSeparated","commaSeparated","commaOrSpaceSeparated","types","DefinedInfo","mask","mark","xlink","xml","caseSensitiveTransform","attributes","caseInsensitiveTransform","xmlns","aria","svg","valid","dash","cap","find","schema","Type","rest","camelcase","dashes","kebab","hastToReact","htmlBase","svgBase","rehypeFilter","parent_","b","c","e","f","g","h","k","l","m","n","p","q","t","u","v","a","r","reactIs_production_min","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SERVER_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_OFFSCREEN_TYPE","enableScopeAPI","enableCacheElement","enableTransitionTracing","enableLegacyHidden","enableDebugTracing","REACT_MODULE_REFERENCE","isValidElementType","typeOf","object","$$typeof","$$typeofType","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","hasWarnedAboutDeprecatedIsAsyncMode","hasWarnedAboutDeprecatedIsConcurrentMode","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","reactIs_development","reactIsModule","whitespace","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","inlineStyleParser","style","lineno","updatePosition","str","Position","msg","re","comments","rules","val","ret","trim","declarations","decls","decl","StyleToObject","hasIterator","len","styleToObjectModule","tableElements","childrenToReact","childIndex","toReact","transform","parentSchema","addProperty","component","basic","React","input","getInputElement","getElementsBeforeCount","flattenPosition","count","commas","spaces","parseStyle","styleReplacer","changelog","deprecated","ReactMarkdown","deprecation","hastNode","PropTypes","wwwPrefix","tokenizeWwwPrefix","domain","tokenizeDomain","tokenizePath","trail","tokenizeTrail","emailDomainDotTrail","tokenizeEmailDomainDotTrail","wwwAutolink","tokenizeWwwAutolink","previousWww","protocolAutolink","tokenizeProtocolAutolink","previousProtocol","emailAutolink","tokenizeEmailAutolink","previousEmail","gfmAutolinkLiteral","dot","gfmAtext","previousUnbalanced","atext","emailDomain","emailDomainAfter","emailDomainDot","wwwStart","wwwAfter","protocolStart","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","indent","gfmFootnote","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","tokenizePotentialGfmFootnoteCall","resolveToPotentialGfmFootnoteCall","call","replacement","callStart","callData","callEscape","labelAtMarker","labelInside","whitespaceAfter","gfmStrikethrough","single","tokenizeStrikethrough","resolveAllStrikethrough","EditMap","addImpl","vecs","editMap","at","gfmTableAlign","inDelimiterRow","alignIndex","gfmTable","tokenizeTable","resolveTable","sizeB","bodyRowStart","headRowBefore","headRowStart","headRowBreak","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","currentTable","currentBody","currentCell","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","valueName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","tokenizeTasklistCheck","gfmTaskListItem","spaceThenNonSpace","gfm","ccount","character","escapeStringRegexp","findAndReplace","ignored","pairs","toPairs","pairIndex","grandparent","change","matchObject","toExpression","toFunction","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transformGfmAutolinkLiterals","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","findUrl","findEmail","isCorrectDomain","splitUrl","trailExec","closingParenIndex","openingParens","closingParens","email","association","containerFlow","indexStack","tracker","eol","indentLines","line","patternCompile","pattern","patternInScope","listInScope","none","safe","positions","infos","expression","numerical","escapeBackslashes","whole","track","lineShift","move","shift","footnoteReferencePeek","gfmFootnoteFromMarkdown","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","enterFootnoteCall","enterFootnoteCallString","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","footnoteDefinition","safeOptions","subexit","blank","containerPhrasing","handle","constructsWithoutStrikethrough","handleDelete","peekDelete","gfmStrikethroughFromMarkdown","enterStrikethrough","exitStrikethrough","gfmStrikethroughToMarkdown","inlineCodePeek","markdownTable","stringLength","defaultStringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","serialize","toAlignment","gfmTableFromMarkdown","enterTable","enterCell","enterRow","exitCodeText","exitTable","gfmTableToMarkdown","padding","alignDelimiters","around","handleTable","handleTableRow","handleTableCell","inlineCodeWithTable","serializeData","handleTableAsData","handleTableRowAsData","matrix","checkBullet","checkListItemIndent","listItemIndent","bullet","gfmTaskListItemFromMarkdown","exitCheck","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","listItemWithTaskListItem","firstParaghraph","sibling","checkable","checkbox","gfmFromMarkdown","gfmToMarkdown","remarkGfm","Message","width","className","jsx"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168]}