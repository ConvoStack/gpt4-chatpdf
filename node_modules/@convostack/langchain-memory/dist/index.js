"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ConvoStackLangchainChatMessageHistory: () => ConvoStackLangchainChatMessageHistory
});
module.exports = __toCommonJS(src_exports);

// src/convostack-chat-message-history.ts
var import_schema = require("langchain/schema");
var import_shared = require("@convostack/shared");
var ConvoStackLangchainChatMessageHistory = class extends import_schema.BaseListChatMessageHistory {
  constructor(fields) {
    const { history } = fields;
    super();
    this.messages = [];
    this.messages = history.map((m) => {
      switch (m.role) {
        case import_shared.HUMAN_ROLE:
          return new import_schema.HumanChatMessage(m.content);
        case import_shared.AI_ROLE:
          return new import_schema.AIChatMessage(m.content);
        default:
          throw new Error(`Got unexpected message role: ${m.role}`);
      }
    });
  }
  async getMessages() {
    return this.messages;
  }
  async addMessage(message) {
    console.warn("ConvoStackLangchainChatMessageHistory.addMessage(message) is not supported. This will be reflected in memory, but it will not be persisted to the DB.");
    this.messages.push(message);
  }
  async clear() {
    console.warn("ConvoStackLangchainChatMessageHistory.clear() is not supported. This will be reflected in memory, but it will not be persisted to the DB.");
    this.messages = [];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConvoStackLangchainChatMessageHistory
});
