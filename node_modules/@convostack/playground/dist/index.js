"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  PlaygroundAgentProxy: () => PlaygroundAgentProxy,
  playground: () => playground
});
module.exports = __toCommonJS(src_exports);
var import_ws = __toESM(require("ws"));
var import_retry = __toESM(require("retry"));
var playground = (agent) => {
  const proxy = new PlaygroundAgentProxy(agent);
  proxy.connect();
};
var PlaygroundAgentProxy = class {
  constructor(agent) {
    this.proxyUrl = "wss://playground-proxy.convostack.ai/agent";
    this.agent = agent;
    const retryOptions = {
      retries: 10,
      factor: 2,
      minTimeout: 1 * 1e3,
      // 1 second
      maxTimeout: 60 * 1e3,
      // 1 minute
      randomize: true
    };
    this.operation = import_retry.default.operation(retryOptions);
  }
  setProxyUrl(url) {
    this.proxyUrl = url;
  }
  connect() {
    let agentId = "";
    this.operation.attempt((currentAttempt) => {
      this.ws = new import_ws.default(this.proxyUrl);
      this.ws.on("open", () => {
        console.log("Connected to proxy");
      });
      this.ws.on("message", async (data) => {
        const dataStr = data.toString();
        if (dataStr.startsWith("AGENT_ID:")) {
          agentId = dataStr.replace("AGENT_ID:", "");
          this.operation.reset();
          console.log(`[ConvoStack] \u{1F680} Interact with your Agent live now: https://playground.convostack.ai/dev?agent=pxy::${encodeURIComponent(agentId)}`);
        } else {
          const message = JSON.parse(dataStr);
          const context = {
            getContextArgs: () => {
              return message.body.contextArgs;
            },
            getHistory: () => {
              return message.body.history;
            },
            getUser: () => {
              return message.body.user;
            },
            getHumanMessage: () => {
              return message.body.humanMessage;
            }
          };
          const callbacks = {
            onMessagePart: (msgPart) => {
              this.ws.send(JSON.stringify({
                id: message.id,
                body: msgPart,
                complete: false
              }));
            }
          };
          try {
            let agentResp = await this.agent.reply(context, callbacks);
            this.ws.send(JSON.stringify({
              id: message.id,
              body: agentResp,
              complete: true,
              status: 200
            }));
          } catch (e) {
            console.error(e);
            this.ws.send(JSON.stringify({
              id: message.id,
              body: { content: "Agent error" },
              complete: true,
              status: 500
            }));
          }
        }
      });
      this.ws.on("close", (code, reason) => {
        console.log("Disconnected from proxy:", reason);
        if (this.operation.retry(new Error(`${reason}`))) {
          console.log(`Attempt ${currentAttempt}: Retrying...`);
        } else {
          console.log("Failed to connect to proxy after " + this.operation.attempts() + " attempts");
        }
      });
      this.ws.on("error", (error) => {
        console.error("WebSocket error:", error);
      });
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PlaygroundAgentProxy,
  playground
});
