"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageEnginePrismaMySQL = void 0;
// Import from ../src so that post-build, it will still use the generated prisma client
const client_1 = require("../src/generated/client");
class StorageEnginePrismaMySQL {
    constructor(dbUrl) {
        // Setup prisma
        this.prisma = new client_1.PrismaClient({
            datasources: {
                db: {
                    url: dbUrl
                }
            }
        });
    }
    async init() {
        await this.prisma.$connect();
    }
    async createUser(user) {
        return this.prisma.user.create({ data: user });
    }
    async updateUser(id, data) {
        return this.prisma.user.update({ where: { id }, data });
    }
    async findUser(filter) {
        return this.prisma.user.findFirst({ where: filter });
    }
    async deleteUser(id) {
        await this.prisma.user.delete({ where: { id } });
    }
    async createConversation(conversation) {
        const conversationData = {
            ...conversation,
            title: conversation.title,
            agent: conversation.agent,
            user: { connect: { id: conversation.userId } }
        };
        delete conversationData["userId"];
        return this.prisma.conversation.create({ data: conversationData });
    }
    async updateConversation(id, data) {
        return this.prisma.conversation.update({ where: { id }, data });
    }
    async findConversation(filter) {
        return this.prisma.conversation.findFirst({ where: filter });
    }
    async findConversations(filter, orderBy, skip, take) {
        return this.prisma.conversation.findMany({
            where: filter,
            orderBy: orderBy,
            skip: skip,
            take: take
        });
    }
    async deleteConversation(id) {
        await this.prisma.conversation.delete({ where: { id } });
    }
    async createMessage(message) {
        const messageData = {
            ...message,
            content: message.content,
            turn: message.turn,
            role: message.role,
            pending: message.pending,
            conversation: { connect: { id: message.conversationId } },
            user: message.userId ? { connect: { id: message.userId } } : undefined
        };
        delete messageData["conversationId"];
        delete messageData["userId"];
        return this.prisma.message.create({ data: messageData });
    }
    async updateMessage(id, data) {
        return this.prisma.message.update({ where: { id }, data });
    }
    async findMessage(filter) {
        return this.prisma.message.findFirst({ where: filter });
    }
    async findMessages(filter, orderBy, skip, take) {
        return this.prisma.message.findMany({
            where: filter,
            orderBy: orderBy,
            skip: skip,
            take: take
        });
    }
    async deleteMessage(id) {
        await this.prisma.message.delete({ where: { id } });
    }
}
exports.StorageEnginePrismaMySQL = StorageEnginePrismaMySQL;
//# sourceMappingURL=index.js.map