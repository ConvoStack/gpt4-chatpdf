import { IConversation, IMessage, IUser, IStorageEngine, IUserFilter, IConversationFilter, IMessageFilter, IConversationOrderBy, IMessageOrderBy } from "@convostack/models";
export declare class StorageEnginePrismaPostgres implements IStorageEngine {
    private prisma;
    constructor(dbUrl: string);
    init(): Promise<void>;
    createUser(user: Partial<IUser>): Promise<IUser>;
    updateUser(id: string, data: Partial<IUser>): Promise<IUser>;
    findUser(filter: IUserFilter): Promise<IUser | null>;
    deleteUser(id: string): Promise<void>;
    createConversation(conversation: Partial<IConversation>): Promise<IConversation>;
    updateConversation(id: string, data: Partial<IConversation>): Promise<IConversation>;
    findConversation(filter: IConversationFilter): Promise<IConversation | null>;
    findConversations(filter?: IConversationFilter, orderBy?: IConversationOrderBy, skip?: number, take?: number): Promise<IConversation[]>;
    deleteConversation(id: string): Promise<void>;
    createMessage(message: Partial<IMessage>): Promise<IMessage>;
    updateMessage(id: string, data: Partial<IMessage>): Promise<IMessage>;
    findMessage(filter: IMessageFilter): Promise<IMessage | null>;
    findMessages(filter?: IMessageFilter, orderBy?: IMessageOrderBy, skip?: number, take?: number): Promise<IMessage[]>;
    deleteMessage(id: string): Promise<void>;
}
