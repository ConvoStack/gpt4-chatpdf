"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageEnginePrismaSQLite = void 0;
// Import from ../src so that post-build, it will still use the generated prisma client
const client_1 = require("../src/generated/client");
const path = __importStar(require("path"));
class StorageEnginePrismaSQLite {
    constructor(dbUrl) {
        // Initially, strip the prefix
        if (dbUrl.startsWith("file:")) {
            dbUrl = dbUrl.substring(5);
        }
        // Check that the path is absolute or make it absolute
        if (!path.isAbsolute(dbUrl)) {
            dbUrl = path.resolve(process.cwd(), dbUrl);
        }
        // Setup prisma
        this.prisma = new client_1.PrismaClient({
            datasources: {
                db: {
                    url: "file:" + dbUrl
                }
            }
        });
    }
    async init() {
        await this.prisma.$connect();
    }
    async createUser(user) {
        return this.prisma.user.create({ data: user });
    }
    async updateUser(id, data) {
        return this.prisma.user.update({ where: { id }, data });
    }
    async findUser(filter) {
        return this.prisma.user.findFirst({ where: filter });
    }
    async deleteUser(id) {
        await this.prisma.user.delete({ where: { id } });
    }
    async createConversation(conversation) {
        const conversationData = {
            ...conversation,
            title: conversation.title,
            agent: conversation.agent,
            user: { connect: { id: conversation.userId } }
        };
        delete conversationData["userId"];
        return this.prisma.conversation.create({ data: conversationData });
    }
    async updateConversation(id, data) {
        return this.prisma.conversation.update({ where: { id }, data });
    }
    async findConversation(filter) {
        return this.prisma.conversation.findFirst({ where: filter });
    }
    async findConversations(filter, orderBy, skip, take) {
        return this.prisma.conversation.findMany({
            where: filter,
            orderBy: orderBy,
            skip: skip,
            take: take
        });
    }
    async deleteConversation(id) {
        await this.prisma.conversation.delete({ where: { id } });
    }
    async createMessage(message) {
        const messageData = {
            ...message,
            content: message.content,
            turn: message.turn,
            role: message.role,
            pending: message.pending,
            conversation: { connect: { id: message.conversationId } },
            user: message.userId ? { connect: { id: message.userId } } : undefined
        };
        delete messageData["conversationId"];
        delete messageData["userId"];
        return this.prisma.message.create({ data: messageData });
    }
    async updateMessage(id, data) {
        return this.prisma.message.update({ where: { id }, data });
    }
    async findMessage(filter) {
        return this.prisma.message.findFirst({ where: filter });
    }
    async findMessages(filter, orderBy, skip, take) {
        return this.prisma.message.findMany({
            where: filter,
            orderBy: orderBy,
            skip: skip,
            take: take
        });
    }
    async deleteMessage(id) {
        await this.prisma.message.delete({ where: { id } });
    }
}
exports.StorageEnginePrismaSQLite = StorageEnginePrismaSQLite;
//# sourceMappingURL=index.js.map