'use strict';

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

exports.__esModule = true;
function pack(array) {
  var position = -1;

  // Remove empty arrays
  for (var i = 0; i < array.length; i++) {
    if (Array.isArray(array[i]) && array[i].length === 0) {
      array[i] = null;
    }
  }

  // Trim `null`
  for (var i = array.length - 1; i >= 0; i--) {
    if (array[i] != null) {
      position = i;
      break;
    }
  }

  array.length = position + 1;
  return array;
}

var NodeType = {
  QUERY: 1,
  FRAGMENT: 2,
  FIELD: 3,
  CALL: 4 };

exports.NodeType = NodeType;

var Node = (function () {
  function Node(fields, fragments) {
    _classCallCheck(this, Node);

    this.fields = fields || [];
    this.fragments = fragments || [];
  }

  Node.getFields = function getFields(nodes) {
    var fieldMap = {};

    for (var iterations = 0; nodes.length > 0; iterations++) {
      if (iterations++ > 10000) {
        throw new Error('Endless loop');
      }

      var node = nodes.shift();

      // Process fragments
      nodes.push.apply(nodes, node.fragments);

      // Process fields
      for (var i = 0; i < node.fields.length; i++) {
        var field = node.fields[i];
        var _name = field.name;
        if (!fieldMap[_name]) {
          fieldMap[_name] = field;
        }
      }
    }

    return Object.keys(fieldMap).sort().map(function (name) {
      return fieldMap[name];
    });
  };

  Node._toString = function _toString(nodes) {
    var fields = Node.getFields(nodes);
    if (fields.length === 0) {
      return '';
    }

    return '{' + fields.join(',') + '}';
  };

  return Node;
})();

exports.Node = Node;

var Query = (function (_Node) {
  function Query(action, args, fields, fragments) {
    _classCallCheck(this, Query);

    _Node.call(this, fields, fragments);
    this.rootCall = action;
    this.rootNode = new Call(action, args);
  }

  _inherits(Query, _Node);

  Query.prototype.toString = function toString() {
    return this.rootNode.toString() + Node._toString([this]);
  };

  Query.prototype.toJSON = function toJSON() {
    return pack([NodeType.QUERY, this.rootNode.name, this.rootNode.args, this.fields, this.fragments]);
  };

  Query.fromJSON = function fromJSON(data) {
    var type = data[0];
    var action = data[1];
    var args = data[2];
    var fields = data[3];
    var fragments = data[4];

    if (type !== NodeType.QUERY) {
      throw new Error('Expected query descriptor');
    }

    if (!args) args = [];
    if (!fields) fields = [];
    if (!fragments) fragments = [];

    return new Query(action, args, fields.map(Field.fromJSON), fragments.map(Fragment.fromJSON));
  };

  return Query;
})(Node);

exports.Query = Query;

var Fragment = (function (_Node2) {
  function Fragment(name, fields, fragments) {
    _classCallCheck(this, Fragment);

    _Node2.call(this, fields, fragments);
    this.name = name;
  }

  _inherits(Fragment, _Node2);

  Fragment.prototype.toString = function toString() {
    return Node._toString([this]);
  };

  Fragment.prototype.toJSON = function toJSON() {
    return pack([NodeType.FRAGMENT, this.name, this.fields, this.fragments]);
  };

  Fragment.fromJSON = function fromJSON(data) {
    var type = data[0];
    var name = data[1];
    var fields = data[2];
    var fragments = data[3];

    if (type !== NodeType.FRAGMENT) {
      throw new Error('Expected fragment descriptor');
    }

    if (!fields) fields = [];
    if (!fragments) fragments = [];

    return new Fragment(name, fields.map(Field.fromJSON), fragments.map(Fragment.fromJSON));
  };

  return Fragment;
})(Node);

exports.Fragment = Fragment;

var Field = (function (_Node3) {
  function Field(name, fields, fragments, calls) {
    _classCallCheck(this, Field);

    _Node3.call(this, fields, fragments);
    this.name = name;
    this.calls = calls || [];
  }

  _inherits(Field, _Node3);

  Field.prototype.toString = function toString() {
    var calls = this.calls.length > 0 ? '.' + this.calls.join('.') : '';

    return this.name + calls + Node._toString([this]);
  };

  Field.prototype.toJSON = function toJSON() {
    return pack([NodeType.FIELD, this.name, this.fields, this.fragments, this.calls]);
  };

  Field.fromJSON = function fromJSON(data) {
    var type = data[0];
    var name = data[1];
    var fields = data[2];
    var fragments = data[3];
    var calls = data[4];

    if (type !== NodeType.FIELD) {
      throw new Error('Expected field descriptor');
    }

    if (!fields) fields = [];
    if (!fragments) fragments = [];
    if (!calls) calls = [];

    return new Field(name, fields.map(Field.fromJSON), fragments.map(Fragment.fromJSON), calls.map(Call.fromJSON));
  };

  return Field;
})(Node);

exports.Field = Field;

var Call = (function () {
  function Call(name, args) {
    _classCallCheck(this, Call);

    this.name = name;
    this.args = args || [];
  }

  Call.prototype.toString = function toString() {
    return '' + this.name + '(' + this.args.map(String).join(',') + ')';
  };

  Call.prototype.toJSON = function toJSON() {
    return pack([NodeType.CALL, this.name, this.args]);
  };

  Call.fromJSON = function fromJSON(data) {
    var type = data[0];
    var name = data[1];
    var args = data[2];

    if (type !== NodeType.CALL) {
      throw new Error('Expected call descriptor');
    }

    if (!args) args = [];

    return new Call(name, args);
  };

  return Call;
})();

exports.Call = Call;